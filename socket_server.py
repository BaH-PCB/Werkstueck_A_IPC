# -------------------------------------------------------------------------------------------------------------------
# title:             Werkstueck_A_IPC_Sockets
# description:       This python program is enabling inter process communication via
#                    the socket method for Win OS using a client server architecture.
#                    This program file represents the server in that architecture.
#                    Four communicating processes are implemented:
#                    First, client: Conv will generate a random number to simulate A/D-Converter,
#                    Second, server: Log will save Converter number in text file,
#                    Third, server: Stat will calculate Converter numbers sum and average,
#                    Fourth, client: Report will print Stat results in the shell.
#                    The program will exit by SIGINT or Ctrl-C.
# author:            Arne Chris Mueller (1302448)
# team:              Arne, Jay, Falko, Franz
# url:               ----------------------
# date:              June 26th 2022
# version:           1.0
# notes:             This server program creates a socket and awaits a connection
#                    from the client program, so the server needs to be started first.
#                    The client program creates a socket as well to establish the connection.
#                    The client generates numbers and sends them to the server,
#                    the server writes those numbers in a log file, calculates sum and average,
#                    and sends the results back to the client, while the client prints the results.
# -------------------------------------------------------------------------------------------------------------------

import socket
from signal import signal, SIGINT
from sys import exit


# ---------------------------------------------------Processes-------------------------------------------------------
def conv_recv_process():
    # Receive process for getting random number generated by conv from the client using socket connection
    while True:
        data = client_socket.recv(4096)                                     # Receiving encoded data from client
        number_msg = (int(data.decode('utf8')))                             # Write utf8-decoded data in int variable
        print('Conv - Empfangener Zahlenwert: ' + str(number_msg) + '\n')   # Print that data as string
        return number_msg                                                   # Return the data to main


def log_process(shared_number_msg):
    # Log process gets received conv numbers from client anded over to write them in a log file
    log_number = str(shared_number_msg)                     # Convert received conv number into string

    # Saving all received conv numbers into a log file
    with open('log_data.txt', 'a') as process_log_file:     # Log file gets opened, numbers getting appended
        process_log_file.write(log_number + '\n')           # And saved
        process_log_file.close()                            # Log file gets closed
        print('Log  - Zahlenwert in Datei geschrieben!')    # Print notification


def stat_process(recv_number_stat, counter_stat):
    # Stat process gets received conv numbers and loop counter handed over to calculate sum and average
    with open('stat_data.txt', 'r') as process_stat_file:               # Open stat file as read to get preveious sum
        return_sum = recv_number_stat + int(process_stat_file.read())   # And calculate new sum adding up conv numbers

        # Delete old sum from stat file to overwrite it with new sum
        with open('stat_data.txt', 'w+') as process_stat_file:                  # Open stat file to overwrite
            process_stat_file.write(str(return_sum))                            # New added up sum
            print(process_stat_file.read())                                     # And write it in stat file again
            print('Stat - Berechnete Summe: ' + str(return_sum))                # Print new sum
            return_avg = return_sum / counter_stat                              # Calculate average with sum and counter
            print('Stat - Berechneter Durchschnitt: ' + str(round(return_avg)))  # Print new average
            return return_sum, round(return_avg)                                 # Return new sum and new average


def report_send_process(send_stat_sum, send_stat_avg):
    # Send process for sending current sum and average report to client using socket connection
    str_sum = str(send_stat_sum)                            # Convert sum into string
    str_avg = str(send_stat_avg)                            # Convert average into string
    # Build up string with sum and average for report on client
    sendstring = ('Report - Empfangene Summe: ' + str_sum + '\n' + 'Report - Empfangener Durchschnitt: ' + str_avg)
    client_socket.send(str(sendstring).encode('utf8'))      # Send utf8-encoded data as string to client using socket


def handler(signal_received, frame):
    # SIGINT or Ctrl-C will trigger a graceful exit and cleanup while connections and files getting closed
    print('\nStrg-C oder SIGINT Befehl wurde empfangen, Programm wird beendet.\n')
    client_socket.close()
    server_socket.close()
    log_file.close()
    stat_file.close()
    exit(0)


# ---------------------------------------------------Main------------------------------------------------------------
if __name__ == '__main__':

    # Server socket gets created with internet protocol and tcp with loopback ip-address, awaiting one client connection
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)   # Open socket with internet protocol and tcp
    server_socket.bind(('127.0.0.1', 51337))                            # Assign loopback ip-adress and port
    server_socket.listen(1)                                             # Wait for one connection

    # Server sockets accepts connection from client socket coming from the client.py program
    (client_socket, addr) = server_socket.accept()
    print('\n----Verbindung zu Client hergestellt----\n\n')             # Connection notification

    # Log and stat file are being created, initialized and cleared outside the loop, avg counter is initialized
    with open('log_data.txt', 'w') as log_file:
        log_file.truncate()
    with open('stat_data.txt', 'w+') as stat_file:
        stat_file.truncate()
        stat_file.write(str(0))
    counter = 1

    # Endless loop starts going into each process
    while True:
        signal(SIGINT, handler)                                         # SIGINT process
        recv_number_msg = conv_recv_process()                           # Conv, handing over client number
        log_process(recv_number_msg)                                    # Log, handing over client number
        stat_sum, stat_avg = stat_process(recv_number_msg, counter)     # Stat, handing over client number and counter
        report_send_process(stat_sum, stat_avg)                         # Report, handing over sum and avg to client
        counter += 1                                                    # Loop counted up by one for avg
        print('\n----------------------------------------\n')
